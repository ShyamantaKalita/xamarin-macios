#!/bin/groovy

def isPr = (env.ghprbPullId && !env.ghprbPullId.empty ? true : false)
def branchName = (isPr ? ("pr" + env.ghprbPullId) : env.BRANCH_NAME)
def gitHash = (isPr ? env.ghprbActualCommit : env.GIT_COMMIT)
def packageUrl = "http://bosstoragemirror.blob.core.windows.net/wrench/jenkins/${branchName}/${env.BUILD_NUMBER}/${gitHash}/package/xamarin-ios-dummy-package.pkg"

pipeline {
    agent { label 'felix-sierra' }
    options {
        timeout(time: 1, unit: 'HOURS')
        checkoutToSubdirectory('xamarin-macios')
        timestamps()
    }
    stages {
        stage('Build') {
            steps {
                sh('env')
                sh('pwd')
                sh('ls -la')
                sh('./xamarin-macios/jenkins/build-package.sh')
            }
        }
        stage('Upload .pkg to Azure') {
            steps {
                step([
                    $class: 'WAStoragePublisher',
                    allowAnonymousAccess: true,
                    cleanUpContainer: false,
                    cntPubAccess: true,
                    containerName: "wrench",
                    doNotFailIfArchivingReturnsNothing: false,
                    doNotUploadIndividualFiles: false,
                    doNotWaitForPreviousBuild: true,
                    excludeFilesPath: '',
                    filesPath: "package/*.pkg",
                    storageAccName: 'bosstoragemirror',
                    storageCredentialId: 'bc6a99d18d7d9ca3f6bf6b19e364d564',
                    uploadArtifactsOnlyIfSuccessful: false,
                    uploadZips: false,
                    virtualPath: "jenkins/${branchName}/${env.BUILD_NUMBER}/${gitHash}/"
                ])
                script {
                    def utils = load "xamarin-macios/jenkins/utils.groovy"
                    utils.reportGitHubStatus (hash, 'jenkins-PKG-Xamarin.iOS', "${packageUrl}", 'SUCCESS', "xamarin-ios-dummy-package.pkg")
                }
            }
        }
    }
}
